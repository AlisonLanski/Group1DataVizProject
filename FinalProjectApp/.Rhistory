addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Picnic grounds",
"Playground", "Pool", "Shelter", "Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0 |
Complex__Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Picnic grounds",
"Playground", "Pool", "Shelter", "Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map (messages suppressed)
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Picnic grounds",
"Playground", "Pool", "Shelter", "Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map (messages suppressed)
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addMarkers(data = filter(parks.spatial@data, Trail__Primitive != 0),
popup = ~popup, group = "Trail") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Picnic grounds",
"Playground", "Pool", "Shelter", "Tennis", "Trail"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map (messages suppressed)
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Natural_Area != 0),
popup = ~popup, group = "Natural area") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Natural area",
"Picnic grounds",
"Playground", "Pool", "Shelter", "Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map (messages suppressed)
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Natural_Area != 0),
popup = ~popup, group = "Natural area") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
overlayGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Natural area",
"Picnic grounds", "Playground", "Pool", "Shelter",
"Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Store information for popup: Park_Name (bolded), Address, and Park_Type
parks.spatial$popup <- paste("<b>", parks.spatial$Park_Name, "</b><br>",
parks.spatial$Address, "<br>",
"Type of park: ", parks.spatial$Park_Type)
# Create leaflet map (messages suppressed)
leaflet() %>%
addTiles() %>%
addMarkers(data = parks.spatial, popup = ~popup, group = "All parks") %>%
addMarkers(data = filter(parks.spatial@data, Basketball != 0),
popup = ~popup, group = "Basketball") %>%
addMarkers(data = filter(parks.spatial@data, Garden__Community != 0 |
Garden__Display != 0),
popup = ~popup, group = "Garden") %>%
addMarkers(data = filter(parks.spatial@data, Golf != 0),
popup = ~popup, group = "Golf") %>%
addMarkers(data = filter(parks.spatial@data, Loop_Walk != 0),
popup = ~popup, group = "Loop walk") %>%
addMarkers(data = filter(parks.spatial@data, MP_Field__Large != 0 |
MP_Field__Multiple != 0 |
MP_Field__Small != 0),
popup = ~popup, group = "Multi-purpose field") %>%
addMarkers(data = filter(parks.spatial@data, Natural_Area != 0),
popup = ~popup, group = "Natural area") %>%
addMarkers(data = filter(parks.spatial@data, Picnic_Grounds != 0),
popup = ~popup, group = "Picnic grounds") %>%
addMarkers(data = filter(parks.spatial@data, Playground__Local != 0 |
Playground__Destination != 0),
popup = ~popup, group = "Playground") %>%
addMarkers(data = filter(parks.spatial@data, Aqua_Feat__Pool != 0),
popup = ~popup, group = "Pool") %>%
addMarkers(data = filter(parks.spatial@data, Shelter != 0 |
Shelter__Group != 0),
popup = ~popup, group = "Shelter") %>%
addMarkers(data = filter(parks.spatial@data, Tennis != 0),
popup = ~popup, group = "Tennis") %>%
addLayersControl(
baseGroups = c("All parks", "Basketball", "Garden", "Golf",
"Loop walk", "Multi-purpose field", "Natural area",
"Picnic grounds", "Playground", "Pool", "Shelter",
"Tennis"),
options = layersControlOptions(collapsed = FALSE)
)
# Load necessary libraries (warning messages suppressed)
library(tidyverse)
library(ggmap)
# Load the saved geocoded.list
load("~/Notre Dame courses/Data Visualization/Week 3/geocoded_list.RData")
# Select only the necessary columns of geocoded.list
geocoded.list <- geocoded.list %>%
select(address, lat, lon, loctype)
# Export to csv
write_csv(geocoded.list,
path = "~/Notre Dame courses/Data Visualization/Week 3/Nagle_geocoded.csv")
# Load necessary libraries
library(tidyverse)
library(rgdal)
library(ggmap)
# Read in the shapefile
census <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject",
layer = "2010_CensusData",
stringsAsFactors = FALSE)
# Load necessary libraries
library(tidyverse)
library(rgdal)
library(ggmap)
# Read in the shapefile
census <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/2010_CensusData/",
layer = "2010_CensusData",
stringsAsFactors = FALSE)
# Read in the shapefile
census <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/2010_CensusData",
layer = "2010_CensusData",
stringsAsFactors = FALSE)
names(census@data)
# Read in the shapefile
abandoned <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/Abandoned_Property_Parcels/",
layer = "Abandoned_Property_Parcels",
stringsAsFactors = FALSE)
# Read in the shapefile
abandoned <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/Abandoned_Property_Parcels",
layer = "Abandoned_Property_Parcels",
stringsAsFactors = FALSE)
names(abandoned@data)
# Read in the shapefile
districts <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/2010_CensusData",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
# Read in the shapefile
districts <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/City_Council_Districts",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
names(districts@data)
# Read in the shapefile
schools <- readOGR(dsn = "~/GitHub/Data-Viz-2018-Fall/FinalProject/School_Boundaries",
layer = "School_Boundaries",
stringsAsFactors = FALSE)
names(schools@data)
# Read in the csv
contacts <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/311_Contact_Management_Cases.csv")
# Print a glimpse of the data
glimpse(contacts)
head(abandoned@data)
head(districts@data)
head(schools@data)
# Read in the csv
calls <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/311_Phone_Call_Log_mod")
# Read in the csv
calls <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/311_Phone_Call_Log_Mod.csv")
# Print a glimpse of the data
glimpse(calls)
# Read in the csv
calls <- read.csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/311_Phone_Call_Log_Mod.csv")
# Print a glimpse of the data
glimpse(calls)
# Read in the csv
calls <- read.csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/311_Phone_Call_Log_Mod.csv", stringsAsFactors = FALSE)
# Print a glimpse of the data
glimpse(calls)
# Read in the csv
cases <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/Code_Enforcement_Cases.csv")
# Print a glimpse of the data
glimpse(cases)
# Read in the csv
parks <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/Parks_Locations_and_Features.csv")
# Print a glimpse of the data
glimpse(parks)
# Read in the csv
facilities <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/Public_Facilities.csv")
# Print a glimpse of the data
glimpse(facilities)
# Read in the csv
lights <- read_csv("~/GitHub/Data-Viz-2018-Fall/FinalProject/Street_Lights.csv")
# Print a glimpse of the data
glimpse(lights)
table(lights$Light_Presence, useNA = "ifany")
# Load necessary libraries (warning messages suppressed)
library(tidyverse)
library(stm)
# Load the data (warning messages suppressed)
txEx <- read.csv("~/Notre Dame courses/Behavioral Data Science/Data sets/BDS-W13-W15-txEx-DataSet.csv")
# Print a glimpse of the data
glimpse(txEx)
# Load necessary libraries (warning messages suppressed)
library(tidyverse)
library(stm)
# Load the data (warning messages suppressed)
txEx <- read.csv("~/Notre Dame courses/Behavioral Data Science/Data sets/BDS-W13-W15-txEx-DataSet.csv")
# Print a glimpse of the data
glimpse(txEx)
# Load the data (warning messages suppressed)
txEx <- read_csv("~/Notre Dame courses/Behavioral Data Science/Data sets/BDS-W13-W15-txEx-DataSet.csv")
# Print a glimpse of the data
glimpse(txEx)
# Load necessary libraries (warning messages suppressed)
library(tidyverse)
library(stm)
# Load the data (warning messages suppressed)
txEx <- read_csv("~/Notre Dame courses/Behavioral Data Science/Data sets/BDS-W13-W15-txEx-DataSet.csv")
# Print a glimpse of the data
glimpse(txEx)
# Remove prefaces from statements
txEx$correctedStatements <- gsub(pattern = "Statement to the Media: ",
replacement = "",
x = txEx$correctedStatements)
txEx$correctedStatements <- gsub(pattern = "Verbal Statement: ",
replacement = "",
x = txEx$correctedStatements)
txEx$correctedStatements <- gsub(pattern = "Spoken: ",
replacement = "",
x = txEx$correctedStatements)
library(rvest)
guess_encoding(txEx$correctedStatements)
sum(is.na(txEx$correctedStatements))
# Load the data (warning messages suppressed)
txEx <- read_csv("~/Notre Dame courses/Behavioral Data Science/Data sets/BDS-W13-W15-txEx-DataSet.csv")
# Print a glimpse of the data
glimpse(txEx)
# Check for missing statements
sum(is.na(txEx$correctedStatements))
# Remove rows with missing statements
txEx <- txEx %>%
filter(!is.na(correctedStatements))
# Remove prefaces from statements
txEx$correctedStatements <- gsub(pattern = "Statement to the Media: ",
replacement = "",
x = txEx$correctedStatements)
txEx$correctedStatements <- gsub(pattern = "Verbal Statement: ",
replacement = "",
x = txEx$correctedStatements)
txEx$correctedStatements <- gsub(pattern = "Spoken: ",
replacement = "",
x = txEx$correctedStatements)
guess_encoding(txEx$correctedStatements)
# Convert encoding to UTF-8
txEx$correctedStatements <- iconv(txEx$correctedStatements,
"windows-1252", "UTF-8", sub = "")
# Look at the first several statements to scan for any problems
head(txEx$correctedStatements)
# Look at the last several statements to scan for any problems
tail(txEx$correctedStatements)
# Process the statements, removing "SMART" and "en" stopwords
txEx_processed <- textProcessor(documents = txEx$correctedStatements,
metadata = txEx,
customstopwords = c(tm::stopwords("SMART"),
tm::stopwords("en")))
# Prepare the text
txEx_prep <- prepDocuments(documents = txEx_processed$documents,
vocab = txEx_processed$vocab,
meta = txEx_processed$meta)
# Determine the number of topics to use
k_test <- searchK(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = seq(3, 10),
verbose = FALSE,
cores = 4)
# Determine the number of topics to use
k_test <- searchK(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = seq(3, 10),
verbose = FALSE)
plot(k_test)
# Determine the number of topics to use
k_test <- searchK(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = seq(3, 15),
verbose = FALSE)
plot(k_test)
set.seed(1982)
# Determine the number of topics to use
k_test <- searchK(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = seq(3, 15),
verbose = FALSE)
plot(k_test)
set.seed(1982)
# Fit stm model with 6 topics
stm_6topics <- stm(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = 6,
verbose = FALSE)
# Plot the topic proportions
plot(stm_6topics)
# Print top words for each topic
labelTopics(stm_6topics)
plot(stm_6topics, type = "labels")
plot(stm_6topics, type = "perspectives", topics = c(1, 2))
plot(stm_6topics, type = "perspectives", topics = c(1, 3))
plot(stm_6topics, type = "perspectives", topics = c(1, 4))
plot(stm_6topics, type = "perspectives", topics = c(1, 5))
plot(stm_6topics, type = "perspectives", topics = c(1, 6))
set.seed(1982)
# Fit stm model with 5 topics
stm_5topics <- stm(documents = txEx_prep$documents,
vocab = txEx_prep$vocab,
K = 5,
verbose = FALSE)
# Plot the topic proportions
plot(stm_5topics)
# Print top words for each topic
labelTopics(stm_5topics)
# Print example plot contrasting Topic 1 and Topic 6
plot(stm_6topics, type = "perspectives", topics = c(4, 6))
# Print statements with high probability of being in each topic
findThoughts(stm_6topics, texts = txEx_prep$meta$correctedStatements, n = 1)
# Print example plot contrasting Topic 1 and Topic 6
plot(stm_6topics, type = "perspectives", topics = c(2, 3))
# Print plot contrasting Topic 4 and Topic 6
plot(stm_6topics, type = "perspectives", topics = c(4, 6))
# Print reviews with high probability of being in each topic
findThoughts(stm_topics6, texts = txEx_prep$meta$correctedStatements, n = 2)
# Print statements with high probability of being in each topic
findThoughts(stm_6topics, texts = txEx_prep$meta$correctedStatements, n = 2)
shiny::runApp('Notre Dame courses/Data Visualization/Final Project/DataVizProject_KPN')
setwd("~/GitHub/Group1DataVizProject/test")
library(shiny); runApp('app3.R')
runApp('app3.R')
