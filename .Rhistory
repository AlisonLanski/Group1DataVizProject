thingy2[1818]
thingy2 <- stringr::str_split(string = dat$Location2, pattern = " \\(", names = c("Address", "GPS"))
thingy2 <- stringr::str_split(string = dat$Location2, pattern = " \\(")[,1]
datetime = "01/01/1900 00:00:00"
#Splits string by space
str_split(datetime, " ", simplify = TRUE)
#Splits string by space
stringr::str_split(datetime, " ", simplify = TRUE)
thingy2[1818,1]
thingy2[[1818]]
str(thingy2[[1818]])
str(thingy2[[1818]])[2]
thingy2[[1818]][2]
thingy2[2]
thingy2[[1:10]][2]
thingy2[,2]
unlist(thingy2)
unlist(thingy2[[1818]])
unlist(thingy2[2])
str(unlist(thingy2))
write.csv(x = dat, file = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/CodeTest.csv")
View(facilities.points)
View(facilities.points)
districts <- readOGR(dsn="SampleData", layer = "City_Council_Districts", stringsAsFactors = FALSE)
dat[1]
dat[1,]
dat$FullAddress <- paste(c(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10]),
collapse = "")
dat$FullAddress <- paste0(c(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10]))
dat$FullAddress <- paste0(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10])
dat$FullAddress[1]
dat$FullAddress <- stringr::str_c(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10])
library(magrittr)
dat <- dat %>% mutate(FullAddress = stringr::str_c(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10]))
dat <- dat %>% dplyr::mutate(FullAddress = stringr::str_c(dat[8], " SOUTH BEND, ", dat[9], " ",
dat[10]))
dat <- dat %>%
dplyr::mutate(FullAddress = stringr::str_c(Street_Address,
" SOUTH BEND, ",
State_Code,
" ",
Zip_Code))
#geocode it
library(ggmap)
register_google(key = "AIzaSyArtVYaFH3qvcVP2ufW5_LMMANBwZK2vS4")
geocoded.list <- geocode(dat$FullAddress[1:5], output = "more")
geocoded.list <- geocode(dat$FullAddress[1:5], output = "more", verbose = FALSE)
geocoded1 <- geocode(dat$FullAddress[1:10000], output = "more")
#SOOOO
#pull in revised doc and work with that
dat <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Code_Enforcement_Cases_SomeLatLon.csv",
stringsAsFactors = FALSE)
dat <- dat %>% dplyr::filter(!is.na(Lat))
#then you can make it a shapefile
dat.spatial <- SpatialPointsDataFrame(coords = dat[,c("Lon","Lat")], data = dat,
proj4string = CRS("+proj=longlat +datum=WGS84"))
#then you can make it a shapefile
code_enforcement_spatial <- SpatialPointsDataFrame(coords = dat[,c("Lon","Lat")], data = dat,
proj4string = CRS("+proj=longlat +datum=WGS84"))
save(code_enforcement_spatial, file = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Code_Enforcement_Some_SHP.Rdata")
load("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Code_Enforcement_Some_SHP.Rdata")
writeOGR(obj = code_enforcement_spatial,
dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/",
layer = "CodeEnforcement")
ogrDrivers()
writeOGR(obj = code_enforcement_spatial,
dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/",
layer = "CodeEnforcement", driver = 'ESRI Shapefile')
dat2 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Parks_Locations_and_Features.csv",
stringsAsFactors = F)
#then you can make it a shapefile
parks_spatial <- SpatialPointsDataFrame(coords = dat2[,c("Lon","Lat")], data = dat2,
proj4string = CRS("+proj=longlat +datum=WGS84"))
save(parks_spatial,
file = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Parks_SHP.Rdata")
dat3 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Public_Facilities.csv")
dat3 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Public_Facilities.csv",
stringsAsFactors = FALSE)
#then you can make it a shapefile
public_facilities_spatial <- SpatialPointsDataFrame(coords = dat3[,c("Lon","Lat")], data = dat3,
proj4string = CRS("+proj=longlat +datum=WGS84"))
save(public_facilities_spatial,
file = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Public_Facilities_SHP.Rdata")
##############################
dat4 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Street_Lights.csv")
##############################
dat4 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Street_Lights.csv",
stringsAsFactors = FALSE)
#then you can make it a shapefile
street_lights_spatial <- SpatialPointsDataFrame(coords = dat4[,c("Lon","Lat")], data = dat4,
proj4string = CRS("+proj=longlat +datum=WGS84"))
save(street_lights_spatial,
file = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Street_Lights_SHP.Rdata")
#####################3
dat5 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/311_Contact_Management_Cases.csv",
stringsAsFactors = FALSE)
dat6 <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/311_Phone_Call_Log_Mod.csv",
stringsAsFactors = FALSE)
load("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Parks_SHP.Rdata")
shiny::runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Data-Viz-2018-Fall/Week04/LiveSession/East_Demo')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
park_subset <- reactive({
park_spatial[!is.na(input$amenity),]
})
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
parks_spatial@data[!is.na(parks_spatial$Water_Feature),]
parks_spatial@coords[!is.na(parks_spatial$Water_Feature),]
parks_spatial[!is.na(input$amenity),] %>% View()
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
parks_spatial[!is.na(parks_spatial[,Water_Feature]),] %>% View()
parks_spatial[!is.na(parks_spatial@data[,Water_Feature]),] %>% View()
parks_spatial[!is.na(parks_spatial@data$Water_Feature),] %>% View()
parks_spatial[!is.na(parks_spatial@data$Water_Feature),]
parks_spatial[!is.na(parks_spatial@data$Sledding_Hill),]
parks_spatial[!is.na(parks_spatial@data[,Sledding_Hill]),]
parks_spatial[!is.na(parks_spatial@data[,"Sledding_Hill"]),]
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
parks_spatial[!is.na(parks_spatial[,'Open_Turf']),]
parks_spatial@data[ia.na(parks_spatial@data)] <- 0
parks_spatial@data[is.na(parks_spatial@data)] <- 0
parks_spatial[Ballfield > 0,]
parks_spatial@data[Ballfield > 0,]
parks_spatial@data['Ballfield' > 0,]
parks_spatial@data[parks_spatial@data['Ballfield' > 0], ]
parks_spatial@data[parks_spatial@data[Ballfield > 0], ]
parks_spatial[parks_spatial['Open_Turf'] > 0, ]
parks_spatial[parks_spatial[,'Open_Turf'] > 0, ]
parks_spatial[!is.na(parks_spatial[,'Open_Turf']),]
load("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Parks_SHP.Rdata")
parks_spatial[!is.na(parks_spatial[,'Open_Turf']),]
parks_spatial[!is.na(parks_spatial@data[,'Open_Turf']),]
runApp('~/GitHub/Group1DataVizProject/DataVizProjectLanski')
city_council_districts <- readOGR(dsn = ".", layer = "City_Council_Districs",
stringsAsFactors = FALSE)
city_council_districts <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/",
layer = "City_Council_Districs",
stringsAsFactors = FALSE)
city_council_districts <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject",
layer = "City_Council_Districs",
stringsAsFactors = FALSE)
setwd("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject")
city_council_districts <- readOGR(dsn = ".",
layer = "City_Council_Districs",
stringsAsFactors = FALSE)
city_council_districts <- readOGR(dsn = ".",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
census <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject",
layer = "2010_CensusData",
stringsAsFactors = FALSE)
leaflet(census) %>%
addTiles() %>%
addPolygons()
leaflet(census) %>%
addTiles() %>%
addPolygons() %>%
addPolygons(city_council_districts)
leaflet() %>%
addTiles() %>%
addPolygons(census) %>%
addPolygons(city_council_districts)
leaflet() %>%
addTiles() %>%
#  addPolygons(census) %>%
addPolygons(city_council_districts)
leaflet(city_country_districts) %>%
addTiles() %>%
#  addPolygons(census) %>%
addPolygons()
leaflet(city_council_districts) %>%
addTiles() %>%
#  addPolygons(census) %>%
addPolygons()
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
CRS(proj4string(parks_spatial))
CRS(proj4string(census))
CRS(proj4string(districts))
#redo census
common_crs <- CRS(proj4string(districts))
census_redo <- spTransform(census, common_crs)
CRS(proj4string(census_redo))
plot(census)
plot(census_redo)
plot(districts)
library(maptools)
parks_census <- over(parks_spatial, census)
#redo parks
parks_redo <- spTransform((parks_spatial, common_crs))
#redo parks
parks_redo <- spTransform(parks_spatial, common_crs)
CRS(proj4string(parks_redo))
parks_census <- over(parks_spatial, census)
parks_census <- over(parks_spatial, census_redo)
parks_census <- over(parks_redo, census_redo)
parks_census_df <- over(parks_redo, census_redo)
#recombine with parks info
parks_census <- spCbind(parks_redo, parks_census_df)
plot(parks_census)
runApp('DataVizProjectLanski')
rm(dat, dat2, dat3, dat4, dat5, dat6)
rm(thingy, thingy2)
#rename the columns to meaningful things
census_fields <- read.delim("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt")
readLines("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt")
#rename the columns to meaningful things
census_fields <- read.delim("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt",
skip = 3)
#rename the columns to meaningful things
census_fields <- read.csv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt",
skip = 3)
#rename the columns to meaningful things
census_fields <- read.tsv("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt",
skip = 3)
#rename the columns to meaningful things
census_fields <- read.txt("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/2010_CensusFieldNames.txt",
skip = 3)
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
plot(parks_census@data$Geo_QName, parks_census@data$SE_T002_01,
main=input$amenity,
ylab="Number of Telephones",
xlab="Year")
# Render a barplot
plot(x = parks_census@data$Geo_QName,
y = parks_census@data$SE_T002_01,
main=input$amenity,
ylab="Number of Telephones",
xlab="Year")
# Render a barplot
plot(x = parks_census@data$SE_TO2A_01,
y = parks_census@data$SE_T002_01,
main=input$amenity,
ylab="Number of Telephones",
xlab="Year")
# Render a barplot
plot(x = parks_census@data$Lat,
y = parks_census@data$Lon,
main=input$amenity,
ylab="Number of Telephones",
xlab="Year")
runApp('DataVizProjectLanski')
table(parks_census@data$SE_T002_02)
# Render a barplot
plot(x = parks_census@data$Lat,
y = parks_census@data$SE_T002_02,
main=input$amenity,
ylab="Number of Telephones",
xlab="Year")
runApp('DataVizProjectLanski')
#set up colnames to real things
colnames(parks_census@data)[1]
#set up colnames to real things
colnames(parks_census@data)[67]
#set up colnames to real things
colnames(parks_census@data)[57]
#set up colnames to real things
colnames(parks_census@data)[47]
#set up colnames to real things
colnames(parks_census@data)[52]
#set up colnames to real things
colnames(parks_census@data)[51]
#set up colnames to real things
colnames(parks_census@data)[51:123]
#set up colnames to real things
census_fields <- c("Area_Name", "Qualifying_Name", "FIPS", "Summary_Level",
"Geographic_Component", "State_FIPS", "County",
"County_Size_Code", "County_Subdivision_FIPS",
"Census_Tract", "Total_Population_1",
"Total_Population_2", "Population_Density_per_sq_mile",
"Area_Land", "Area_Total", "Area_Total_Area_Land",
"Area_Total_Area_Water", "Total_Population_3", "Males",
"Females", "Total_Population_4", "Age_Under_5",
"Age_5_to_9", "Age_10_to_14", "Age_15_to_17",
"Age_18_to_24", "Age_25_to_34", "Age_35_to_44",
"Age_45_to_54", "Age_55_to_64", "Age_65_to_74",
"Age_75_to_84", "Age_85_years_plus",
"Total_population_5", "White", "Black_African_American",
"American_Indian_Alaska_Native", "Asian",
"Native_Hawaiian_Other_Pacific_Islander",
"Some_Other_Race", "Two_or_More_Races", "Households",
"Family_households", "Households_Married_couple_family",
"Households_Other_family",
"Households_Male_householder_no_wife_present",
"Households_Female_householder_no_husband_present",
"Households_Nonfamily_households",
"Households_Householder_living_alone",
"Households_Householder_not_living_alone",
"Total_population_6", "Total_population_In_households",
"Total_population_In_family_households",
"Total_population_in_households_Householder",
"Total_population_in_households_Spouse",
"Total_population_in_households_Child",
"Total_population_in_households_Grandchild",
"Total_population_in_households_Brother_or_sister",
"Total_population_in_households_Parent",
"Total_population_in_households_Other_relatives",
"Total_population_in_households_Nonrelatives",
"Total_population_in_nonfamily_households",
"Total_population_in_households_Living_alone",
"Total_population_in_households_Not_living_alone",
"Total_population_in_households_Nonrelatives",
"Total_population_in_group_quarters",
"Total_population_Institutionalized",
"Total_population_Noninstitutionalized_group_quarters",
"Housing_units", "Occupied_housing_units",
"Occupied_housing_units_Owners",
"Occupied_housing_units_Renters")
124-51
colnames(parks_census@data)[51:123]
head(parks_census@data[,15_61]
head(parks_census@data[,51:61]
head(parks_census@data[,51:61])
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Parks By Type"),
# Sidebar with a input
sidebarLayout(
sidebarPanel(
selectInput(inputId = "amenity",
label = "Choose a park amenity",
choices = names(parks_census@data[4:47]),
selected = 'Open_Turf'),
selectInput(inputId = "zip",
label = "Which zip code?",
choices = unique(parks_census@data[3]))
),
# Show a plot of the generated distribution
mainPanel(leafletOutput("ParkMap"), plotOutput("DistPlot"), tableOutput("CensusTable"))
)
)
head(parks_census@data[,51:61])
census_fields(1:11)
census_fields[1:11]
census_fields[1:12]
head(parks_census@data[,51:62])
#set up colnames to real things
census_fields <- c("State_FIPS", "County_FIPS", "Census_Tract", "Geo_ID",
"Tract_Number", "Tract_Name", "MTFCC", "FUNC_Stat",
"Area_Land", "Area_Water", "Full_Name", "Total_Population_1",
"Total_Population_2", "Population_Density_per_sq_mile",
"Area_Land", "Area_Total", "Area_Total_Area_Land",
"Area_Total_Area_Water", "Total_Population_3", "Males",
"Females", "Total_Population_4", "Age_Under_5",
"Age_5_to_9", "Age_10_to_14", "Age_15_to_17",
"Age_18_to_24", "Age_25_to_34", "Age_35_to_44",
"Age_45_to_54", "Age_55_to_64", "Age_65_to_74",
"Age_75_to_84", "Age_85_years_plus",
"Total_population_5", "White", "Black_African_American",
"American_Indian_Alaska_Native", "Asian",
"Native_Hawaiian_Other_Pacific_Islander",
"Some_Other_Race", "Two_or_More_Races", "Households",
"Family_households", "Households_Married_couple_family",
"Households_Other_family",
"Households_Male_householder_no_wife_present",
"Households_Female_householder_no_husband_present",
"Households_Nonfamily_households",
"Households_Householder_living_alone",
"Households_Householder_not_living_alone",
"Total_population_6", "Total_population_In_households",
"Total_population_In_family_households",
"Total_population_in_households_Householder",
"Total_population_in_households_Spouse",
"Total_population_in_households_Child",
"Total_population_in_households_Grandchild",
"Total_population_in_households_Brother_or_sister",
"Total_population_in_households_Parent",
"Total_population_in_households_Other_relatives",
"Total_population_in_households_Nonrelatives",
"Total_population_in_nonfamily_households",
"Total_population_in_households_Living_alone",
"Total_population_in_households_Not_living_alone",
"Total_population_in_households_Nonrelatives",
"Total_population_in_group_quarters",
"Total_population_Institutionalized",
"Total_population_Noninstitutionalized_group_quarters",
"Housing_units", "Occupied_housing_units",
"Occupied_housing_units_Owners",
"Occupied_housing_units_Renters")
124-51
colnames(parks_census@data)[51:123] <- census_fields
parks_census@data[, 62:123] <- as.numeric(parks_census@data[,62:123])
# Render a barplot
ggplot(
data = parks_subset()@data,
#      data = parks_census@data, #works
aes(x = Tract_Name, y = Population_Density_per_sq_mile)
) + geom_col()
runApp('DataVizProjectLanski')
districts <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
#add district info
parks_districs_df <- over(parks_census, districts)
#add district info
parks_districts_df <- over(parks_census, districts)
#recombine with parks info
parks_census_dist <- spCbind(parks_census, parks_districts_df)
runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
install.packages("DT")
library(DT)
install.packages("DT")
shiny::runApp('DataVizProjectLanski')
runApp('DataVizProjectLanski')
unique(parks_census_dist@data$Num)
library(shiny)
library(rgdal)
library(leaflet)
library(tidyverse)
library(DT)
options(scipen = 99)
#parks
load("C:/Users/Lanski/Documents/GitHub/Group1DataVizProject/Parks_SHP.Rdata")
#districts
districts <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
#census
census <- readOGR(dsn = "C:/Users/Lanski/Documents/GitHub/Group1DataVizProject",
layer = "2010_CensusData",
stringsAsFactors = FALSE)
#get coding from districts
common_crs <- CRS(proj4string(districts))
#redo census
census_redo <- spTransform(census, common_crs)
CRS(proj4string(census_redo))
#redo parks
parks_redo <- spTransform(parks_spatial, common_crs)
CRS(proj4string(parks_redo))
#get the census data for the park points
library(maptools)
parks_census_df <- over(parks_redo, census_redo)
#recombine with parks info
parks_census <- spCbind(parks_redo, parks_census_df)
#set up colnames to real things
census_fields <- c("State_FIPS", "County_FIPS", "Census_Tract", "Geo_ID",
"Tract_Number", "Tract_Name", "MTFCC", "FUNC_Stat",
"Area_Land", "Area_Water", "Full_Name", "Total_Population",
"Total_Population_2", "Population_Density_per_sq_mile",
"Area_Land", "Area_Total", "Area_Total_Area_Land",
"Area_Total_Area_Water", "Total_Population_3", "Males",
"Females", "Total_Population_4", "Age_Under_5",
"Age_5_to_9", "Age_10_to_14", "Age_15_to_17",
"Age_18_to_24", "Age_25_to_34", "Age_35_to_44",
"Age_45_to_54", "Age_55_to_64", "Age_65_to_74",
"Age_75_to_84", "Age_85_years_plus",
"Total_population_5", "White", "Black_African_American",
"American_Indian_Alaska_Native", "Asian",
"Native_Hawaiian_Other_Pacific_Islander",
"Some_Other_Race", "Two_or_More_Races", "Households",
"Family_households", "Households_Married_couple_family",
"Households_Other_family",
"Households_Male_householder_no_wife_present",
"Households_Female_householder_no_husband_present",
"Households_Nonfamily_households",
"Households_Householder_living_alone",
"Households_Householder_not_living_alone",
"Total_population_6", "Total_population_In_households",
"Total_population_In_family_households",
"Total_population_in_households_Householder",
"Total_population_in_households_Spouse",
"Total_population_in_households_Child",
"Total_population_in_households_Grandchild",
"Total_population_in_households_Brother_or_sister",
"Total_population_in_households_Parent",
"Total_population_in_households_Other_relatives",
"Total_population_in_households_Nonrelatives",
"Total_population_in_nonfamily_households",
"Total_population_in_households_Living_alone",
"Total_population_in_households_Not_living_alone",
"Total_population_in_households_Nonrelatives",
"Total_population_in_group_quarters",
"Total_population_Institutionalized",
"Total_population_Noninstitutionalized_group_quarters",
"Housing_units", "Occupied_housing_units",
"Occupied_housing_units_Owners",
"Occupied_housing_units_Renters")
colnames(parks_census@data)[51:123] <- census_fields
#add district info
parks_districts_df <- over(parks_census, districts)
#recombine with parks info
parks_census_dist <- spCbind(parks_census, parks_districts_df)
pal_d <- colorBin("Greys", domain = unique(parks_census_dist@data$Num))
unique(parks_census_dist@data$Num)
runApp('DataVizProjectLanski')
